/* Auto-generated by genmsg_cpp for file /home/disa1301/Documents/Codigo/Manfred/ros/manfred_arm_msgs/msg/pmac_info.msg */
#ifndef MANFRED_ARM_MSGS_MESSAGE_PMAC_INFO_H
#define MANFRED_ARM_MSGS_MESSAGE_PMAC_INFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/JointState.h"

namespace manfred_arm_msgs
{
template <class ContainerAllocator>
struct pmac_info_ {
  typedef pmac_info_<ContainerAllocator> Type;

  pmac_info_()
  : joint_state()
  {
  }

  pmac_info_(const ContainerAllocator& _alloc)
  : joint_state(_alloc)
  {
  }

  typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joint_state_type;
   ::sensor_msgs::JointState_<ContainerAllocator>  joint_state;


  typedef boost::shared_ptr< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::pmac_info_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pmac_info
typedef  ::manfred_arm_msgs::pmac_info_<std::allocator<void> > pmac_info;

typedef boost::shared_ptr< ::manfred_arm_msgs::pmac_info> pmac_infoPtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::pmac_info const> pmac_infoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manfred_arm_msgs::pmac_info_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manfred_arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::pmac_info_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9ca061465ef0ed08771ed240c43789f5";
  }

  static const char* value(const  ::manfred_arm_msgs::pmac_info_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9ca061465ef0ed08ULL;
  static const uint64_t static_value2 = 0x771ed240c43789f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/pmac_info";
  }

  static const char* value(const  ::manfred_arm_msgs::pmac_info_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Posicion y velocidad de los motores\n\
sensor_msgs/JointState joint_state\n\
\n\
# error de posicion que da la pmac calculado como: posicion_comandada - posicion_alcanzada\n\
# como no lo encuentro entre los registros de la pmac, no se pondr√°\n\
# sensor_msgs/JointState following_error\n\
\n\
#int64 error_code\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::pmac_info_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pmac_info_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manfred_arm_msgs::pmac_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manfred_arm_msgs::pmac_info_<ContainerAllocator> & v) 
  {
    s << indent << "joint_state: ";
s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANFRED_ARM_MSGS_MESSAGE_PMAC_INFO_H

