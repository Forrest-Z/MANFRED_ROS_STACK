/* Auto-generated by genmsg_cpp for file /home/disa1301/Documents/Codigo/Manfred/ros/manfred_arm_msgs/msg/LocalizacionEvolucionDiferencialGoal.msg */
#ifndef MANFRED_ARM_MSGS_MESSAGE_LOCALIZACIONEVOLUCIONDIFERENCIALGOAL_H
#define MANFRED_ARM_MSGS_MESSAGE_LOCALIZACIONEVOLUCIONDIFERENCIALGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace manfred_arm_msgs
{
template <class ContainerAllocator>
struct LocalizacionEvolucionDiferencialGoal_ {
  typedef LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> Type;

  LocalizacionEvolucionDiferencialGoal_()
  : dummyFlagGoal(false)
  {
  }

  LocalizacionEvolucionDiferencialGoal_(const ContainerAllocator& _alloc)
  : dummyFlagGoal(false)
  {
  }

  typedef uint8_t _dummyFlagGoal_type;
  uint8_t dummyFlagGoal;


  typedef boost::shared_ptr< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LocalizacionEvolucionDiferencialGoal
typedef  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<std::allocator<void> > LocalizacionEvolucionDiferencialGoal;

typedef boost::shared_ptr< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal> LocalizacionEvolucionDiferencialGoalPtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal const> LocalizacionEvolucionDiferencialGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manfred_arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "96e4e09f1d65f85c4452bd9a4f16ee7b";
  }

  static const char* value(const  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x96e4e09f1d65f85cULL;
  static const uint64_t static_value2 = 0x4452bd9a4f16ee7bULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/LocalizacionEvolucionDiferencialGoal";
  }

  static const char* value(const  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
bool dummyFlagGoal\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dummyFlagGoal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LocalizacionEvolucionDiferencialGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manfred_arm_msgs::LocalizacionEvolucionDiferencialGoal_<ContainerAllocator> & v) 
  {
    s << indent << "dummyFlagGoal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dummyFlagGoal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANFRED_ARM_MSGS_MESSAGE_LOCALIZACIONEVOLUCIONDIFERENCIALGOAL_H

