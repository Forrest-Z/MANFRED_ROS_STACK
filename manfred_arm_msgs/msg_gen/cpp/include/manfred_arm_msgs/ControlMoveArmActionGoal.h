/* Auto-generated by genmsg_cpp for file /home/disa1301/Documents/Codigo/Manfred/ros/manfred_arm_msgs/msg/ControlMoveArmActionGoal.msg */
#ifndef MANFRED_ARM_MSGS_MESSAGE_CONTROLMOVEARMACTIONGOAL_H
#define MANFRED_ARM_MSGS_MESSAGE_CONTROLMOVEARMACTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "manfred_arm_msgs/ControlMoveArmGoal.h"

namespace manfred_arm_msgs
{
template <class ContainerAllocator>
struct ControlMoveArmActionGoal_ {
  typedef ControlMoveArmActionGoal_<ContainerAllocator> Type;

  ControlMoveArmActionGoal_()
  : header()
  , goal_id()
  , goal()
  {
  }

  ControlMoveArmActionGoal_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , goal_id(_alloc)
  , goal(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
   ::actionlib_msgs::GoalID_<ContainerAllocator>  goal_id;

  typedef  ::manfred_arm_msgs::ControlMoveArmGoal_<ContainerAllocator>  _goal_type;
   ::manfred_arm_msgs::ControlMoveArmGoal_<ContainerAllocator>  goal;


  typedef boost::shared_ptr< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ControlMoveArmActionGoal
typedef  ::manfred_arm_msgs::ControlMoveArmActionGoal_<std::allocator<void> > ControlMoveArmActionGoal;

typedef boost::shared_ptr< ::manfred_arm_msgs::ControlMoveArmActionGoal> ControlMoveArmActionGoalPtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::ControlMoveArmActionGoal const> ControlMoveArmActionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace manfred_arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8cb6c2f834f4b54e5654e385097a9f1c";
  }

  static const char* value(const  ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8cb6c2f834f4b54eULL;
  static const uint64_t static_value2 = 0x5654e385097a9f1cULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/ControlMoveArmActionGoal";
  }

  static const char* value(const  ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
ControlMoveArmGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: manfred_arm_msgs/ControlMoveArmGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
#Header header\n\
float32 max_frequency\n\
duration time_offset\n\
geometry_msgs/Point32 posic\n\
geometry_msgs/Vector3 rpy\n\
#Permite indicar si hay que tener en cuanta la orientación del efector final\n\
bool ori\n\
#Marca la última posición de una trayectoria\n\
bool ultimo\n\
# ¿Hara falta la velocidad? Al menos hace falta para la funcion de simulacion del robot, tanto vel como position\n\
sensor_msgs/JointState joint_state\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.goal_id);
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ControlMoveArmActionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::manfred_arm_msgs::ControlMoveArmActionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
s << std::endl;
    Printer< ::manfred_arm_msgs::ControlMoveArmGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MANFRED_ARM_MSGS_MESSAGE_CONTROLMOVEARMACTIONGOAL_H

