/* Auto-generated by genmsg_cpp for file /home/disa1301/Documents/Codigo/Manfred/ros/manfred_arm_msgs/srv/Get_goal.srv */
#ifndef MANFRED_ARM_MSGS_SERVICE_GET_GOAL_H
#define MANFRED_ARM_MSGS_SERVICE_GET_GOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Vector3.h"

namespace manfred_arm_msgs
{
template <class ContainerAllocator>
struct Get_goalRequest_ {
  typedef Get_goalRequest_<ContainerAllocator> Type;

  Get_goalRequest_()
  : hola(false)
  {
  }

  Get_goalRequest_(const ContainerAllocator& _alloc)
  : hola(false)
  {
  }

  typedef uint8_t _hola_type;
  uint8_t hola;


  typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Get_goalRequest
typedef  ::manfred_arm_msgs::Get_goalRequest_<std::allocator<void> > Get_goalRequest;

typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalRequest> Get_goalRequestPtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalRequest const> Get_goalRequestConstPtr;


template <class ContainerAllocator>
struct Get_goalResponse_ {
  typedef Get_goalResponse_<ContainerAllocator> Type;

  Get_goalResponse_()
  : posic()
  , rpy()
  , ori(false)
  , ultimo(false)
  , error_code(0)
  {
  }

  Get_goalResponse_(const ContainerAllocator& _alloc)
  : posic(_alloc)
  , rpy(_alloc)
  , ori(false)
  , ultimo(false)
  , error_code(0)
  {
  }

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _posic_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  posic;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _rpy_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  rpy;

  typedef uint8_t _ori_type;
  uint8_t ori;

  typedef uint8_t _ultimo_type;
  uint8_t ultimo;

  typedef int32_t _error_code_type;
  int32_t error_code;


  typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Get_goalResponse
typedef  ::manfred_arm_msgs::Get_goalResponse_<std::allocator<void> > Get_goalResponse;

typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalResponse> Get_goalResponsePtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::Get_goalResponse const> Get_goalResponseConstPtr;

struct Get_goal
{

typedef Get_goalRequest Request;
typedef Get_goalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Get_goal
} // namespace manfred_arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ca53f4e65a121b35191ef67551a24d36";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xca53f4e65a121b35ULL;
  static const uint64_t static_value2 = 0x191ef67551a24d36ULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Get_goalRequest";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
bool hola\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "807ef5f7c46d0d4b6ed2d36e0a57db4a";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x807ef5f7c46d0d4bULL;
  static const uint64_t static_value2 = 0x6ed2d36e0a57db4aULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Get_goalResponse";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/Point32 posic\n\
geometry_msgs/Vector3 rpy\n\
\n\
\n\
\n\
bool ori\n\
\n\
\n\
bool ultimo\n\
\n\
int32 error_code\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hola);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Get_goalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.posic);
    stream.next(m.rpy);
    stream.next(m.ori);
    stream.next(m.ultimo);
    stream.next(m.error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Get_goalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<manfred_arm_msgs::Get_goal> {
  static const char* value() 
  {
    return "a426a8387670350bdffe669155a91dd4";
  }

  static const char* value(const manfred_arm_msgs::Get_goal&) { return value(); } 
};

template<>
struct DataType<manfred_arm_msgs::Get_goal> {
  static const char* value() 
  {
    return "manfred_arm_msgs/Get_goal";
  }

  static const char* value(const manfred_arm_msgs::Get_goal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a426a8387670350bdffe669155a91dd4";
  }

  static const char* value(const manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Get_goal";
  }

  static const char* value(const manfred_arm_msgs::Get_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a426a8387670350bdffe669155a91dd4";
  }

  static const char* value(const manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Get_goal";
  }

  static const char* value(const manfred_arm_msgs::Get_goalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MANFRED_ARM_MSGS_SERVICE_GET_GOAL_H

