/* Auto-generated by genmsg_cpp for file /home/disa1301/Documents/Codigo/Manfred/ros/manfred_arm_msgs/srv/Write_pmac.srv */
#ifndef MANFRED_ARM_MSGS_SERVICE_WRITE_PMAC_H
#define MANFRED_ARM_MSGS_SERVICE_WRITE_PMAC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace manfred_arm_msgs
{
template <class ContainerAllocator>
struct Write_pmacRequest_ {
  typedef Write_pmacRequest_<ContainerAllocator> Type;

  Write_pmacRequest_()
  : send()
  {
  }

  Write_pmacRequest_(const ContainerAllocator& _alloc)
  : send(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _send_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  send;


  typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Write_pmacRequest
typedef  ::manfred_arm_msgs::Write_pmacRequest_<std::allocator<void> > Write_pmacRequest;

typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacRequest> Write_pmacRequestPtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacRequest const> Write_pmacRequestConstPtr;


template <class ContainerAllocator>
struct Write_pmacResponse_ {
  typedef Write_pmacResponse_<ContainerAllocator> Type;

  Write_pmacResponse_()
  : answer()
  , error_code(0)
  {
  }

  Write_pmacResponse_(const ContainerAllocator& _alloc)
  : answer(_alloc)
  , error_code(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _answer_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  answer;

  typedef int64_t _error_code_type;
  int64_t error_code;


  typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Write_pmacResponse
typedef  ::manfred_arm_msgs::Write_pmacResponse_<std::allocator<void> > Write_pmacResponse;

typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacResponse> Write_pmacResponsePtr;
typedef boost::shared_ptr< ::manfred_arm_msgs::Write_pmacResponse const> Write_pmacResponseConstPtr;

struct Write_pmac
{

typedef Write_pmacRequest Request;
typedef Write_pmacResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Write_pmac
} // namespace manfred_arm_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b903a44705b40a7116d3d10341f60dfc";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb903a44705b40a71ULL;
  static const uint64_t static_value2 = 0x16d3d10341f60dfcULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Write_pmacRequest";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
string send\n\
\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5460ec5d3b27f3b819e044f0c51b5d76";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5460ec5d3b27f3b8ULL;
  static const uint64_t static_value2 = 0x19e044f0c51b5d76ULL;
};

template<class ContainerAllocator>
struct DataType< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Write_pmacResponse";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string answer\n\
\n\
int64 error_code\n\
\n\
\n\
";
  }

  static const char* value(const  ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.send);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Write_pmacRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.answer);
    stream.next(m.error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Write_pmacResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<manfred_arm_msgs::Write_pmac> {
  static const char* value() 
  {
    return "90ae29861113f3282de4f6e9e93502ac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmac&) { return value(); } 
};

template<>
struct DataType<manfred_arm_msgs::Write_pmac> {
  static const char* value() 
  {
    return "manfred_arm_msgs/Write_pmac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmac&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "90ae29861113f3282de4f6e9e93502ac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Write_pmac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmacRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "90ae29861113f3282de4f6e9e93502ac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "manfred_arm_msgs/Write_pmac";
  }

  static const char* value(const manfred_arm_msgs::Write_pmacResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MANFRED_ARM_MSGS_SERVICE_WRITE_PMAC_H

